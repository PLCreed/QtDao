/********************************************************************************
** This file is auto generated by vscode-qtdao.
** Don't modify this file!
********************************************************************************/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

#include "../global.h"

QTDAO_BEGIN_NAMESPACE

class Version {
    
private:
    //
    int ver;

    QVariantMap __extra;

public:

   Version() {
        ver = -1;
   }

    Version(
        const int& ver
    ) : ver(ver)
    {
    }

public:
    class Fields {
    public:
        dao::EntityField<int> ver{"ver", "dao_version", false};

    protected:
        void reset(const QString& tbName) {
            ver.resetTb(tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 1;
        }

        static QString getTableName() {
            return QStringLiteral("dao_version");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "ver";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "ver";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("ver integer null default -1");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const Version& entity) {
            return QVariantList()
                << entity.ver;
        }

        static QVariant getValueByName(const Version& entity, const QString& target) {
            if (target == "ver") {
                return entity.ver;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(Version& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(Version& entity, const QString& target, QVariant value) {
            if (target == "ver") {
                entity.ver = value.value<int>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static Version fromJson(const QJsonObject& object) {
            Version entity;
            entity.ver = object.value("ver").toVariant().value<int>();
            return entity;
        }

        static QJsonObject toJson(const Version& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("ver", entity.ver);

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

    bool operator==(const Version& other) const {
        return ver == other.ver;
    }

public:
    //
    inline void setVer(const int& ver) {this->ver = ver;}
    //
    inline int getVer() const {return ver;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<Version> VersionList;

QTDAO_END_NAMESPACE