/*This file is auto generated by vscode-qtdao*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

class SqliteDefaultTestStr {
    Q_GADGET

    Q_PROPERTY(QString typetext MEMBER typetext)
    Q_PROPERTY(QString typetext2 MEMBER typetext2)
    Q_PROPERTY(QString typetext3 MEMBER typetext3)
    Q_PROPERTY(QString typetext4 MEMBER typetext4)
    Q_PROPERTY(QString typetext5 MEMBER typetext5)
    Q_PROPERTY(QByteArray typeblob MEMBER typeblob)
    Q_PROPERTY(QByteArray typeblob2 MEMBER typeblob2)
    Q_PROPERTY(QByteArray typeblob3 MEMBER typeblob3)
    Q_PROPERTY(QByteArray typeblob4 MEMBER typeblob4)
    Q_PROPERTY(QByteArray typeblob5 MEMBER typeblob5)
    Q_PROPERTY(QVariant typevariant MEMBER typevariant)
    Q_PROPERTY(QVariant typevariant1 MEMBER typevariant1)
    Q_PROPERTY(QVariant typevariant2 MEMBER typevariant2)
    Q_PROPERTY(QVariant typevariant3 MEMBER typevariant3)
    Q_PROPERTY(QVariantMap extra MEMBER __extra)

private:
    //
    QString typetext;
    //
    QString typetext2;
    //
    QString typetext3;
    //
    QString typetext4;
    //
    QString typetext5;
    //
    QByteArray typeblob;
    //
    QByteArray typeblob2;
    //
    QByteArray typeblob3;
    //
    QByteArray typeblob4;
    //
    QByteArray typeblob5;
    //
    QVariant typevariant;
    //
    QVariant typevariant1;
    //
    QVariant typevariant2;
    //
    QVariant typevariant3;

    QVariantMap __extra;

public:

   SqliteDefaultTestStr() {
        typetext = "string";
        typetext2 = QString();
        typetext3 = QString();
        typetext4 = "null";
        typetext5 = QString("string");
        typeblob = "string";
        typeblob2 = QByteArray();
        typeblob3 = QByteArray();
        typeblob4 = "null";
        typeblob5 = QByteArray("string");
        typevariant = 100;
        typevariant1 = "string";
        typevariant2 = QTime::currentTime();
        typevariant3 = QDateTime::currentDateTime();
   }

    SqliteDefaultTestStr(
        const QString& typetext,
        const QString& typetext2,
        const QString& typetext3,
        const QString& typetext4,
        const QString& typetext5,
        const QByteArray& typeblob,
        const QByteArray& typeblob2,
        const QByteArray& typeblob3,
        const QByteArray& typeblob4,
        const QByteArray& typeblob5,
        const QVariant& typevariant,
        const QVariant& typevariant1,
        const QVariant& typevariant2,
        const QVariant& typevariant3
    ) : typetext(typetext)
    , typetext2(typetext2)
    , typetext3(typetext3)
    , typetext4(typetext4)
    , typetext5(typetext5)
    , typeblob(typeblob)
    , typeblob2(typeblob2)
    , typeblob3(typeblob3)
    , typeblob4(typeblob4)
    , typeblob5(typeblob5)
    , typevariant(typevariant)
    , typevariant1(typevariant1)
    , typevariant2(typevariant2)
    , typevariant3(typevariant3)
    {
    }

public:
    class Fields {
    public:
        dao::EntityField<QString> typetext = dao::EntityField<QString>("typetext", "ts_sqlitedefaultteststr");
        dao::EntityField<QString> typetext2 = dao::EntityField<QString>("typetext2", "ts_sqlitedefaultteststr");
        dao::EntityField<QString> typetext3 = dao::EntityField<QString>("typetext3", "ts_sqlitedefaultteststr");
        dao::EntityField<QString> typetext4 = dao::EntityField<QString>("typetext4", "ts_sqlitedefaultteststr");
        dao::EntityField<QString> typetext5 = dao::EntityField<QString>("typetext5", "ts_sqlitedefaultteststr");
        dao::EntityField<QByteArray> typeblob = dao::EntityField<QByteArray>("typeblob", "ts_sqlitedefaultteststr");
        dao::EntityField<QByteArray> typeblob2 = dao::EntityField<QByteArray>("typeblob2", "ts_sqlitedefaultteststr");
        dao::EntityField<QByteArray> typeblob3 = dao::EntityField<QByteArray>("typeblob3", "ts_sqlitedefaultteststr");
        dao::EntityField<QByteArray> typeblob4 = dao::EntityField<QByteArray>("typeblob4", "ts_sqlitedefaultteststr");
        dao::EntityField<QByteArray> typeblob5 = dao::EntityField<QByteArray>("typeblob5", "ts_sqlitedefaultteststr");
        dao::EntityField<QVariant> typevariant = dao::EntityField<QVariant>("typevariant", "ts_sqlitedefaultteststr");
        dao::EntityField<QVariant> typevariant1 = dao::EntityField<QVariant>("typevariant1", "ts_sqlitedefaultteststr");
        dao::EntityField<QVariant> typevariant2 = dao::EntityField<QVariant>("typevariant2", "ts_sqlitedefaultteststr");
        dao::EntityField<QVariant> typevariant3 = dao::EntityField<QVariant>("typevariant3", "ts_sqlitedefaultteststr");

    protected:
        void reset(const QString& tbName) {
            typetext = dao::EntityField<QString>("typetext", tbName);
            typetext2 = dao::EntityField<QString>("typetext2", tbName);
            typetext3 = dao::EntityField<QString>("typetext3", tbName);
            typetext4 = dao::EntityField<QString>("typetext4", tbName);
            typetext5 = dao::EntityField<QString>("typetext5", tbName);
            typeblob = dao::EntityField<QByteArray>("typeblob", tbName);
            typeblob2 = dao::EntityField<QByteArray>("typeblob2", tbName);
            typeblob3 = dao::EntityField<QByteArray>("typeblob3", tbName);
            typeblob4 = dao::EntityField<QByteArray>("typeblob4", tbName);
            typeblob5 = dao::EntityField<QByteArray>("typeblob5", tbName);
            typevariant = dao::EntityField<QVariant>("typevariant", tbName);
            typevariant1 = dao::EntityField<QVariant>("typevariant1", tbName);
            typevariant2 = dao::EntityField<QVariant>("typevariant2", tbName);
            typevariant3 = dao::EntityField<QVariant>("typevariant3", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 14;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlitedefaultteststr");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5"
                << "typeblob"
                << "typeblob2"
                << "typeblob3"
                << "typeblob4"
                << "typeblob5"
                << "typevariant"
                << "typevariant1"
                << "typevariant2"
                << "typevariant3";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5"
                << "typeblob"
                << "typeblob2"
                << "typeblob3"
                << "typeblob4"
                << "typeblob5"
                << "typevariant"
                << "typevariant1"
                << "typevariant2"
                << "typevariant3";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typetext text null default 'string'")
                << QStringLiteral("typetext2 text null default null")
                << QStringLiteral("typetext3 text null default ''")
                << QStringLiteral("typetext4 text null default 'null'")
                << QStringLiteral("typetext5 text null default null")
                << QStringLiteral("typeblob blob null default 'string'")
                << QStringLiteral("typeblob2 blob null default null")
                << QStringLiteral("typeblob3 blob null default ''")
                << QStringLiteral("typeblob4 blob null default 'null'")
                << QStringLiteral("typeblob5 blob null default null")
                << QStringLiteral("typevariant blob null default null")
                << QStringLiteral("typevariant1 blob null default null")
                << QStringLiteral("typevariant2 blob null default null")
                << QStringLiteral("typevariant3 blob null default null");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqliteDefaultTestStr& entity) {
            return QVariantList()
                << entity.typetext
                << entity.typetext2
                << entity.typetext3
                << entity.typetext4
                << entity.typetext5
                << entity.typeblob
                << entity.typeblob2
                << entity.typeblob3
                << entity.typeblob4
                << entity.typeblob5
                << entity.typevariant
                << entity.typevariant1
                << entity.typevariant2
                << entity.typevariant3;
        }

        static QVariant getValueByName(const SqliteDefaultTestStr& entity, const QString& target) {
            if (target == "typetext") {
                return entity.typetext;
            }
            if (target == "typetext2") {
                return entity.typetext2;
            }
            if (target == "typetext3") {
                return entity.typetext3;
            }
            if (target == "typetext4") {
                return entity.typetext4;
            }
            if (target == "typetext5") {
                return entity.typetext5;
            }
            if (target == "typeblob") {
                return entity.typeblob;
            }
            if (target == "typeblob2") {
                return entity.typeblob2;
            }
            if (target == "typeblob3") {
                return entity.typeblob3;
            }
            if (target == "typeblob4") {
                return entity.typeblob4;
            }
            if (target == "typeblob5") {
                return entity.typeblob5;
            }
            if (target == "typevariant") {
                return entity.typevariant;
            }
            if (target == "typevariant1") {
                return entity.typevariant1;
            }
            if (target == "typevariant2") {
                return entity.typevariant2;
            }
            if (target == "typevariant3") {
                return entity.typevariant3;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqliteDefaultTestStr& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqliteDefaultTestStr& entity, const QString& target, QVariant value) {
            if (target == "typetext") {
                entity.typetext = value.value<QString>();
            } else if (target == "typetext2") {
                entity.typetext2 = value.value<QString>();
            } else if (target == "typetext3") {
                entity.typetext3 = value.value<QString>();
            } else if (target == "typetext4") {
                entity.typetext4 = value.value<QString>();
            } else if (target == "typetext5") {
                entity.typetext5 = value.value<QString>();
            } else if (target == "typeblob") {
                entity.typeblob = value.value<QByteArray>();
            } else if (target == "typeblob2") {
                entity.typeblob2 = value.value<QByteArray>();
            } else if (target == "typeblob3") {
                entity.typeblob3 = value.value<QByteArray>();
            } else if (target == "typeblob4") {
                entity.typeblob4 = value.value<QByteArray>();
            } else if (target == "typeblob5") {
                entity.typeblob5 = value.value<QByteArray>();
            } else if (target == "typevariant") {
                entity.typevariant = value.value<QVariant>();
            } else if (target == "typevariant1") {
                entity.typevariant1 = value.value<QVariant>();
            } else if (target == "typevariant2") {
                entity.typevariant2 = value.value<QVariant>();
            } else if (target == "typevariant3") {
                entity.typevariant3 = value.value<QVariant>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqliteDefaultTestStr fromJson(const QJsonObject& object) {
            SqliteDefaultTestStr entity;
            entity.typetext = object.value("typetext").toVariant().value<QString>();
            entity.typetext2 = object.value("typetext2").toVariant().value<QString>();
            entity.typetext3 = object.value("typetext3").toVariant().value<QString>();
            entity.typetext4 = object.value("typetext4").toVariant().value<QString>();
            entity.typetext5 = object.value("typetext5").toVariant().value<QString>();
            entity.typeblob = QByteArray::fromBase64(object.value("typeblob").toString().toLatin1());
            entity.typeblob2 = QByteArray::fromBase64(object.value("typeblob2").toString().toLatin1());
            entity.typeblob3 = QByteArray::fromBase64(object.value("typeblob3").toString().toLatin1());
            entity.typeblob4 = QByteArray::fromBase64(object.value("typeblob4").toString().toLatin1());
            entity.typeblob5 = QByteArray::fromBase64(object.value("typeblob5").toString().toLatin1());
            entity.typevariant = object.value("typevariant");
            entity.typevariant1 = object.value("typevariant1");
            entity.typevariant2 = object.value("typevariant2");
            entity.typevariant3 = object.value("typevariant3");
            return entity;
        }

        static QJsonObject toJson(const SqliteDefaultTestStr& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typetext", entity.typetext);
            object.insert("typetext2", entity.typetext2);
            object.insert("typetext3", entity.typetext3);
            object.insert("typetext4", entity.typetext4);
            object.insert("typetext5", entity.typetext5);
            object.insert("typeblob", QString::fromLatin1(entity.typeblob.toBase64()));
            object.insert("typeblob2", QString::fromLatin1(entity.typeblob2.toBase64()));
            object.insert("typeblob3", QString::fromLatin1(entity.typeblob3.toBase64()));
            object.insert("typeblob4", QString::fromLatin1(entity.typeblob4.toBase64()));
            object.insert("typeblob5", QString::fromLatin1(entity.typeblob5.toBase64()));
            object.insert("typevariant", QJsonValue::fromVariant(entity.typevariant));
            object.insert("typevariant1", QJsonValue::fromVariant(entity.typevariant1));
            object.insert("typevariant2", QJsonValue::fromVariant(entity.typevariant2));
            object.insert("typevariant3", QJsonValue::fromVariant(entity.typevariant3));

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypetext(const QString& typetext) {this->typetext = typetext;}
    //
    inline QString getTypetext() const {return typetext;}
    //
    inline void setTypetext2(const QString& typetext2) {this->typetext2 = typetext2;}
    //
    inline QString getTypetext2() const {return typetext2;}
    //
    inline void setTypetext3(const QString& typetext3) {this->typetext3 = typetext3;}
    //
    inline QString getTypetext3() const {return typetext3;}
    //
    inline void setTypetext4(const QString& typetext4) {this->typetext4 = typetext4;}
    //
    inline QString getTypetext4() const {return typetext4;}
    //
    inline void setTypetext5(const QString& typetext5) {this->typetext5 = typetext5;}
    //
    inline QString getTypetext5() const {return typetext5;}
    //
    inline void setTypeblob(const QByteArray& typeblob) {this->typeblob = typeblob;}
    //
    inline QByteArray getTypeblob() const {return typeblob;}
    //
    inline void setTypeblob2(const QByteArray& typeblob2) {this->typeblob2 = typeblob2;}
    //
    inline QByteArray getTypeblob2() const {return typeblob2;}
    //
    inline void setTypeblob3(const QByteArray& typeblob3) {this->typeblob3 = typeblob3;}
    //
    inline QByteArray getTypeblob3() const {return typeblob3;}
    //
    inline void setTypeblob4(const QByteArray& typeblob4) {this->typeblob4 = typeblob4;}
    //
    inline QByteArray getTypeblob4() const {return typeblob4;}
    //
    inline void setTypeblob5(const QByteArray& typeblob5) {this->typeblob5 = typeblob5;}
    //
    inline QByteArray getTypeblob5() const {return typeblob5;}
    //
    inline void setTypevariant(const QVariant& typevariant) {this->typevariant = typevariant;}
    //
    inline QVariant getTypevariant() const {return typevariant;}
    //
    inline void setTypevariant1(const QVariant& typevariant1) {this->typevariant1 = typevariant1;}
    //
    inline QVariant getTypevariant1() const {return typevariant1;}
    //
    inline void setTypevariant2(const QVariant& typevariant2) {this->typevariant2 = typevariant2;}
    //
    inline QVariant getTypevariant2() const {return typevariant2;}
    //
    inline void setTypevariant3(const QVariant& typevariant3) {this->typevariant3 = typevariant3;}
    //
    inline QVariant getTypevariant3() const {return typevariant3;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqliteDefaultTestStr> SqliteDefaultTestStrList;
Q_DECLARE_METATYPE(SqliteDefaultTestStr);