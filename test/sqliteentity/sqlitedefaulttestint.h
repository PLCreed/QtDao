/*This file is auto generated by vscode-qtdao*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

class SqliteDefaultTestInt {
    Q_GADGET

    Q_PROPERTY(int typeint MEMBER typeint)
    Q_PROPERTY(int typeintnull MEMBER typeintnull)
    Q_PROPERTY(qint64 typelong MEMBER typelong)
    Q_PROPERTY(qint64 typelongnull MEMBER typelongnull)
    Q_PROPERTY(qreal typereal MEMBER typereal)
    Q_PROPERTY(qreal typerealnull MEMBER typerealnull)
    Q_PROPERTY(QVariantMap extra MEMBER __extra)

private:
    //
    int typeint;
    //
    int typeintnull;
    //
    qint64 typelong;
    //
    qint64 typelongnull;
    //
    qreal typereal;
    //
    qreal typerealnull;

    QVariantMap __extra;

public:

   SqliteDefaultTestInt() {
        typeint = -1;
        typeintnull = int();
        typelong = 1;
        typelongnull = qint64();
        typereal = 10.0;
        typerealnull = qreal();
   }

    SqliteDefaultTestInt(
        const int& typeint,
        const int& typeintnull,
        const qint64& typelong,
        const qint64& typelongnull,
        const qreal& typereal,
        const qreal& typerealnull
    ) : typeint(typeint)
    , typeintnull(typeintnull)
    , typelong(typelong)
    , typelongnull(typelongnull)
    , typereal(typereal)
    , typerealnull(typerealnull)
    {
    }

public:
    class Fields {
    public:
        dao::EntityField<int> typeint = dao::EntityField<int>("typeint", "ts_sqlitedefaulttestint");
        dao::EntityField<int> typeintnull = dao::EntityField<int>("typeintnull", "ts_sqlitedefaulttestint");
        dao::EntityField<qint64> typelong = dao::EntityField<qint64>("typelong", "ts_sqlitedefaulttestint");
        dao::EntityField<qint64> typelongnull = dao::EntityField<qint64>("typelongnull", "ts_sqlitedefaulttestint");
        dao::EntityField<qreal> typereal = dao::EntityField<qreal>("typereal", "ts_sqlitedefaulttestint");
        dao::EntityField<qreal> typerealnull = dao::EntityField<qreal>("typerealnull", "ts_sqlitedefaulttestint");

    protected:
        void reset(const QString& tbName) {
            typeint = dao::EntityField<int>("typeint", tbName);
            typeintnull = dao::EntityField<int>("typeintnull", tbName);
            typelong = dao::EntityField<qint64>("typelong", tbName);
            typelongnull = dao::EntityField<qint64>("typelongnull", tbName);
            typereal = dao::EntityField<qreal>("typereal", tbName);
            typerealnull = dao::EntityField<qreal>("typerealnull", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 6;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlitedefaulttestint");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "typeint"
                << "typeintnull"
                << "typelong"
                << "typelongnull"
                << "typereal"
                << "typerealnull";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typeint"
                << "typeintnull"
                << "typelong"
                << "typelongnull"
                << "typereal"
                << "typerealnull";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typeint integer null default -1")
                << QStringLiteral("typeintnull integer null default null")
                << QStringLiteral("typelong integer null default 1")
                << QStringLiteral("typelongnull integer null default null")
                << QStringLiteral("typereal real null default 10.0")
                << QStringLiteral("typerealnull real null default null");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueIndexFields() {
            return QList<QStringList>();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqliteDefaultTestInt& entity) {
            return QVariantList()
                << entity.typeint
                << entity.typeintnull
                << entity.typelong
                << entity.typelongnull
                << entity.typereal
                << entity.typerealnull;
        }

        static QVariant getValueByName(const SqliteDefaultTestInt& entity, const QString& target) {
            if (target == "typeint") {
                return entity.typeint;
            }
            if (target == "typeintnull") {
                return entity.typeintnull;
            }
            if (target == "typelong") {
                return entity.typelong;
            }
            if (target == "typelongnull") {
                return entity.typelongnull;
            }
            if (target == "typereal") {
                return entity.typereal;
            }
            if (target == "typerealnull") {
                return entity.typerealnull;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqliteDefaultTestInt& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqliteDefaultTestInt& entity, const QString& target, QVariant value) {
            if (target == "typeint") {
                entity.typeint = value.value<int>();
            } else if (target == "typeintnull") {
                entity.typeintnull = value.value<int>();
            } else if (target == "typelong") {
                entity.typelong = value.value<qint64>();
            } else if (target == "typelongnull") {
                entity.typelongnull = value.value<qint64>();
            } else if (target == "typereal") {
                entity.typereal = value.value<qreal>();
            } else if (target == "typerealnull") {
                entity.typerealnull = value.value<qreal>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqliteDefaultTestInt fromJson(const QJsonObject& object) {
            SqliteDefaultTestInt entity;
            entity.typeint = object.value("typeint").toVariant().value<int>();
            entity.typeintnull = object.value("typeintnull").toVariant().value<int>();
            entity.typelong = object.value("typelong").toVariant().value<qint64>();
            entity.typelongnull = object.value("typelongnull").toVariant().value<qint64>();
            entity.typereal = object.value("typereal").toVariant().value<qreal>();
            entity.typerealnull = object.value("typerealnull").toVariant().value<qreal>();
            return entity;
        }

        static QJsonObject toJson(const SqliteDefaultTestInt& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typeint", entity.typeint);
            object.insert("typeintnull", entity.typeintnull);
            object.insert("typelong", entity.typelong);
            object.insert("typelongnull", entity.typelongnull);
            object.insert("typereal", entity.typereal);
            object.insert("typerealnull", entity.typerealnull);

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypeint(const int& typeint) {this->typeint = typeint;}
    //
    inline int getTypeint() const {return typeint;}
    //
    inline void setTypeintnull(const int& typeintnull) {this->typeintnull = typeintnull;}
    //
    inline int getTypeintnull() const {return typeintnull;}
    //
    inline void setTypelong(const qint64& typelong) {this->typelong = typelong;}
    //
    inline qint64 getTypelong() const {return typelong;}
    //
    inline void setTypelongnull(const qint64& typelongnull) {this->typelongnull = typelongnull;}
    //
    inline qint64 getTypelongnull() const {return typelongnull;}
    //
    inline void setTypereal(const qreal& typereal) {this->typereal = typereal;}
    //
    inline qreal getTypereal() const {return typereal;}
    //
    inline void setTyperealnull(const qreal& typerealnull) {this->typerealnull = typerealnull;}
    //
    inline qreal getTyperealnull() const {return typerealnull;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqliteDefaultTestInt> SqliteDefaultTestIntList;
Q_DECLARE_METATYPE(SqliteDefaultTestInt);