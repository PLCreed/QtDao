/*This file is auto generated by vscode-qtdao*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

class SqlServerDefaultTestInt {
    Q_GADGET

    Q_PROPERTY(uchar typetinyint MEMBER typetinyint)
    Q_PROPERTY(uchar typetinyintnull MEMBER typetinyintnull)
    Q_PROPERTY(short typesmallint MEMBER typesmallint)
    Q_PROPERTY(short typesmallintnull MEMBER typesmallintnull)
    Q_PROPERTY(int typeint MEMBER typeint)
    Q_PROPERTY(int typeintnull MEMBER typeintnull)
    Q_PROPERTY(qint64 typebigint MEMBER typebigint)
    Q_PROPERTY(qint64 typebigintnull MEMBER typebigintnull)
    Q_PROPERTY(qreal typefloat MEMBER typefloat)
    Q_PROPERTY(qreal typefloatnull MEMBER typefloatnull)
    Q_PROPERTY(qreal typedecimal MEMBER typedecimal)
    Q_PROPERTY(qreal typedecimalnull MEMBER typedecimalnull)
    Q_PROPERTY(qreal typenumeric MEMBER typenumeric)
    Q_PROPERTY(qreal typenumericnull MEMBER typenumericnull)
    Q_PROPERTY(qreal typereal MEMBER typereal)
    Q_PROPERTY(qreal typerealnull MEMBER typerealnull)
    Q_PROPERTY(QVariantMap extra MEMBER __extra)

private:
    //
    uchar typetinyint;
    //
    uchar typetinyintnull;
    //
    short typesmallint;
    //
    short typesmallintnull;
    //
    int typeint;
    //
    int typeintnull;
    //
    qint64 typebigint;
    //
    qint64 typebigintnull;
    //
    qreal typefloat;
    //
    qreal typefloatnull;
    //
    qreal typedecimal;
    //
    qreal typedecimalnull;
    //
    qreal typenumeric;
    //
    qreal typenumericnull;
    //
    qreal typereal;
    //
    qreal typerealnull;

    QVariantMap __extra;

public:

   SqlServerDefaultTestInt() {
        typetinyint = 1;
        typetinyintnull = uchar();
        typesmallint = 2;
        typesmallintnull = short();
        typeint = 4;
        typeintnull = int();
        typebigint = 5;
        typebigintnull = qint64();
        typefloat = 0.1;
        typefloatnull = qreal();
        typedecimal = 0.3;
        typedecimalnull = qreal();
        typenumeric = 0.4;
        typenumericnull = qreal();
        typereal = 0.5;
        typerealnull = qreal();
   }

    SqlServerDefaultTestInt(
        const uchar& typetinyint,
        const uchar& typetinyintnull,
        const short& typesmallint,
        const short& typesmallintnull,
        const int& typeint,
        const int& typeintnull,
        const qint64& typebigint,
        const qint64& typebigintnull,
        const qreal& typefloat,
        const qreal& typefloatnull,
        const qreal& typedecimal,
        const qreal& typedecimalnull,
        const qreal& typenumeric,
        const qreal& typenumericnull,
        const qreal& typereal,
        const qreal& typerealnull
    ) : typetinyint(typetinyint)
    , typetinyintnull(typetinyintnull)
    , typesmallint(typesmallint)
    , typesmallintnull(typesmallintnull)
    , typeint(typeint)
    , typeintnull(typeintnull)
    , typebigint(typebigint)
    , typebigintnull(typebigintnull)
    , typefloat(typefloat)
    , typefloatnull(typefloatnull)
    , typedecimal(typedecimal)
    , typedecimalnull(typedecimalnull)
    , typenumeric(typenumeric)
    , typenumericnull(typenumericnull)
    , typereal(typereal)
    , typerealnull(typerealnull)
    {
    }

public:
    class Fields {
    public:
        dao::EntityField<uchar> typetinyint = dao::EntityField<uchar>("typetinyint", "ts_sqlserverdefaulttestint");
        dao::EntityField<uchar> typetinyintnull = dao::EntityField<uchar>("typetinyintnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<short> typesmallint = dao::EntityField<short>("typesmallint", "ts_sqlserverdefaulttestint");
        dao::EntityField<short> typesmallintnull = dao::EntityField<short>("typesmallintnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<int> typeint = dao::EntityField<int>("typeint", "ts_sqlserverdefaulttestint");
        dao::EntityField<int> typeintnull = dao::EntityField<int>("typeintnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<qint64> typebigint = dao::EntityField<qint64>("typebigint", "ts_sqlserverdefaulttestint");
        dao::EntityField<qint64> typebigintnull = dao::EntityField<qint64>("typebigintnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typefloat = dao::EntityField<qreal>("typefloat", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typefloatnull = dao::EntityField<qreal>("typefloatnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typedecimal = dao::EntityField<qreal>("typedecimal", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typedecimalnull = dao::EntityField<qreal>("typedecimalnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typenumeric = dao::EntityField<qreal>("typenumeric", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typenumericnull = dao::EntityField<qreal>("typenumericnull", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typereal = dao::EntityField<qreal>("typereal", "ts_sqlserverdefaulttestint");
        dao::EntityField<qreal> typerealnull = dao::EntityField<qreal>("typerealnull", "ts_sqlserverdefaulttestint");

    protected:
        void reset(const QString& tbName) {
            typetinyint = dao::EntityField<uchar>("typetinyint", tbName);
            typetinyintnull = dao::EntityField<uchar>("typetinyintnull", tbName);
            typesmallint = dao::EntityField<short>("typesmallint", tbName);
            typesmallintnull = dao::EntityField<short>("typesmallintnull", tbName);
            typeint = dao::EntityField<int>("typeint", tbName);
            typeintnull = dao::EntityField<int>("typeintnull", tbName);
            typebigint = dao::EntityField<qint64>("typebigint", tbName);
            typebigintnull = dao::EntityField<qint64>("typebigintnull", tbName);
            typefloat = dao::EntityField<qreal>("typefloat", tbName);
            typefloatnull = dao::EntityField<qreal>("typefloatnull", tbName);
            typedecimal = dao::EntityField<qreal>("typedecimal", tbName);
            typedecimalnull = dao::EntityField<qreal>("typedecimalnull", tbName);
            typenumeric = dao::EntityField<qreal>("typenumeric", tbName);
            typenumericnull = dao::EntityField<qreal>("typenumericnull", tbName);
            typereal = dao::EntityField<qreal>("typereal", tbName);
            typerealnull = dao::EntityField<qreal>("typerealnull", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 16;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlserverdefaulttestint");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "typetinyint"
                << "typetinyintnull"
                << "typesmallint"
                << "typesmallintnull"
                << "typeint"
                << "typeintnull"
                << "typebigint"
                << "typebigintnull"
                << "typefloat"
                << "typefloatnull"
                << "typedecimal"
                << "typedecimalnull"
                << "typenumeric"
                << "typenumericnull"
                << "typereal"
                << "typerealnull";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typetinyint"
                << "typetinyintnull"
                << "typesmallint"
                << "typesmallintnull"
                << "typeint"
                << "typeintnull"
                << "typebigint"
                << "typebigintnull"
                << "typefloat"
                << "typefloatnull"
                << "typedecimal"
                << "typedecimalnull"
                << "typenumeric"
                << "typenumericnull"
                << "typereal"
                << "typerealnull";
        }

        static QStringList getFieldsWithoutTimestamp() {
            return QStringList()
                << "typetinyint"
                << "typetinyintnull"
                << "typesmallint"
                << "typesmallintnull"
                << "typeint"
                << "typeintnull"
                << "typebigint"
                << "typebigintnull"
                << "typefloat"
                << "typefloatnull"
                << "typedecimal"
                << "typedecimalnull"
                << "typenumeric"
                << "typenumericnull"
                << "typereal"
                << "typerealnull";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typetinyint tinyint null default 1")
                << QStringLiteral("typetinyintnull tinyint null default null")
                << QStringLiteral("typesmallint smallint null default 2")
                << QStringLiteral("typesmallintnull smallint null default null")
                << QStringLiteral("typeint int null default 4")
                << QStringLiteral("typeintnull int null default null")
                << QStringLiteral("typebigint bigint null default 5")
                << QStringLiteral("typebigintnull bigint null default null")
                << QStringLiteral("typefloat float null default 0.1")
                << QStringLiteral("typefloatnull float null default null")
                << QStringLiteral("typedecimal decimal(8,4) null default 0.3")
                << QStringLiteral("typedecimalnull decimal(9,5) null default null")
                << QStringLiteral("typenumeric numeric(8) null default 0.4")
                << QStringLiteral("typenumericnull numeric(9) null default null")
                << QStringLiteral("typereal real null default null")
                << QStringLiteral("typerealnull real null default null");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QString getIndexOption(const QString& name) {
            Q_UNUSED(name);
            return QString();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqlServerDefaultTestInt& entity) {
            return QVariantList()
                << entity.typetinyint
                << entity.typetinyintnull
                << entity.typesmallint
                << entity.typesmallintnull
                << entity.typeint
                << entity.typeintnull
                << entity.typebigint
                << entity.typebigintnull
                << entity.typefloat
                << entity.typefloatnull
                << entity.typedecimal
                << entity.typedecimalnull
                << entity.typenumeric
                << entity.typenumericnull
                << entity.typereal
                << entity.typerealnull;
        }

        static QVariant getValueByName(const SqlServerDefaultTestInt& entity, const QString& target) {
            if (target == "typetinyint") {
                return entity.typetinyint;
            }
            if (target == "typetinyintnull") {
                return entity.typetinyintnull;
            }
            if (target == "typesmallint") {
                return entity.typesmallint;
            }
            if (target == "typesmallintnull") {
                return entity.typesmallintnull;
            }
            if (target == "typeint") {
                return entity.typeint;
            }
            if (target == "typeintnull") {
                return entity.typeintnull;
            }
            if (target == "typebigint") {
                return entity.typebigint;
            }
            if (target == "typebigintnull") {
                return entity.typebigintnull;
            }
            if (target == "typefloat") {
                return entity.typefloat;
            }
            if (target == "typefloatnull") {
                return entity.typefloatnull;
            }
            if (target == "typedecimal") {
                return entity.typedecimal;
            }
            if (target == "typedecimalnull") {
                return entity.typedecimalnull;
            }
            if (target == "typenumeric") {
                return entity.typenumeric;
            }
            if (target == "typenumericnull") {
                return entity.typenumericnull;
            }
            if (target == "typereal") {
                return entity.typereal;
            }
            if (target == "typerealnull") {
                return entity.typerealnull;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqlServerDefaultTestInt& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqlServerDefaultTestInt& entity, const QString& target, QVariant value) {
            if (target == "typetinyint") {
                entity.typetinyint = value.value<uchar>();
            } else if (target == "typetinyintnull") {
                entity.typetinyintnull = value.value<uchar>();
            } else if (target == "typesmallint") {
                entity.typesmallint = value.value<short>();
            } else if (target == "typesmallintnull") {
                entity.typesmallintnull = value.value<short>();
            } else if (target == "typeint") {
                entity.typeint = value.value<int>();
            } else if (target == "typeintnull") {
                entity.typeintnull = value.value<int>();
            } else if (target == "typebigint") {
                entity.typebigint = value.value<qint64>();
            } else if (target == "typebigintnull") {
                entity.typebigintnull = value.value<qint64>();
            } else if (target == "typefloat") {
                entity.typefloat = value.value<qreal>();
            } else if (target == "typefloatnull") {
                entity.typefloatnull = value.value<qreal>();
            } else if (target == "typedecimal") {
                entity.typedecimal = value.value<qreal>();
            } else if (target == "typedecimalnull") {
                entity.typedecimalnull = value.value<qreal>();
            } else if (target == "typenumeric") {
                entity.typenumeric = value.value<qreal>();
            } else if (target == "typenumericnull") {
                entity.typenumericnull = value.value<qreal>();
            } else if (target == "typereal") {
                entity.typereal = value.value<qreal>();
            } else if (target == "typerealnull") {
                entity.typerealnull = value.value<qreal>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqlServerDefaultTestInt fromJson(const QJsonObject& object) {
            SqlServerDefaultTestInt entity;
            entity.typetinyint = object.value("typetinyint").toVariant().value<uchar>();
            entity.typetinyintnull = object.value("typetinyintnull").toVariant().value<uchar>();
            entity.typesmallint = object.value("typesmallint").toVariant().value<short>();
            entity.typesmallintnull = object.value("typesmallintnull").toVariant().value<short>();
            entity.typeint = object.value("typeint").toVariant().value<int>();
            entity.typeintnull = object.value("typeintnull").toVariant().value<int>();
            entity.typebigint = object.value("typebigint").toVariant().value<qint64>();
            entity.typebigintnull = object.value("typebigintnull").toVariant().value<qint64>();
            entity.typefloat = object.value("typefloat").toVariant().value<qreal>();
            entity.typefloatnull = object.value("typefloatnull").toVariant().value<qreal>();
            entity.typedecimal = object.value("typedecimal").toVariant().value<qreal>();
            entity.typedecimalnull = object.value("typedecimalnull").toVariant().value<qreal>();
            entity.typenumeric = object.value("typenumeric").toVariant().value<qreal>();
            entity.typenumericnull = object.value("typenumericnull").toVariant().value<qreal>();
            entity.typereal = object.value("typereal").toVariant().value<qreal>();
            entity.typerealnull = object.value("typerealnull").toVariant().value<qreal>();
            return entity;
        }

        static QJsonObject toJson(const SqlServerDefaultTestInt& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typetinyint", entity.typetinyint);
            object.insert("typetinyintnull", entity.typetinyintnull);
            object.insert("typesmallint", entity.typesmallint);
            object.insert("typesmallintnull", entity.typesmallintnull);
            object.insert("typeint", entity.typeint);
            object.insert("typeintnull", entity.typeintnull);
            object.insert("typebigint", entity.typebigint);
            object.insert("typebigintnull", entity.typebigintnull);
            object.insert("typefloat", entity.typefloat);
            object.insert("typefloatnull", entity.typefloatnull);
            object.insert("typedecimal", entity.typedecimal);
            object.insert("typedecimalnull", entity.typedecimalnull);
            object.insert("typenumeric", entity.typenumeric);
            object.insert("typenumericnull", entity.typenumericnull);
            object.insert("typereal", entity.typereal);
            object.insert("typerealnull", entity.typerealnull);

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypetinyint(const uchar& typetinyint) {this->typetinyint = typetinyint;}
    //
    inline uchar getTypetinyint() const {return typetinyint;}
    //
    inline void setTypetinyintnull(const uchar& typetinyintnull) {this->typetinyintnull = typetinyintnull;}
    //
    inline uchar getTypetinyintnull() const {return typetinyintnull;}
    //
    inline void setTypesmallint(const short& typesmallint) {this->typesmallint = typesmallint;}
    //
    inline short getTypesmallint() const {return typesmallint;}
    //
    inline void setTypesmallintnull(const short& typesmallintnull) {this->typesmallintnull = typesmallintnull;}
    //
    inline short getTypesmallintnull() const {return typesmallintnull;}
    //
    inline void setTypeint(const int& typeint) {this->typeint = typeint;}
    //
    inline int getTypeint() const {return typeint;}
    //
    inline void setTypeintnull(const int& typeintnull) {this->typeintnull = typeintnull;}
    //
    inline int getTypeintnull() const {return typeintnull;}
    //
    inline void setTypebigint(const qint64& typebigint) {this->typebigint = typebigint;}
    //
    inline qint64 getTypebigint() const {return typebigint;}
    //
    inline void setTypebigintnull(const qint64& typebigintnull) {this->typebigintnull = typebigintnull;}
    //
    inline qint64 getTypebigintnull() const {return typebigintnull;}
    //
    inline void setTypefloat(const qreal& typefloat) {this->typefloat = typefloat;}
    //
    inline qreal getTypefloat() const {return typefloat;}
    //
    inline void setTypefloatnull(const qreal& typefloatnull) {this->typefloatnull = typefloatnull;}
    //
    inline qreal getTypefloatnull() const {return typefloatnull;}
    //
    inline void setTypedecimal(const qreal& typedecimal) {this->typedecimal = typedecimal;}
    //
    inline qreal getTypedecimal() const {return typedecimal;}
    //
    inline void setTypedecimalnull(const qreal& typedecimalnull) {this->typedecimalnull = typedecimalnull;}
    //
    inline qreal getTypedecimalnull() const {return typedecimalnull;}
    //
    inline void setTypenumeric(const qreal& typenumeric) {this->typenumeric = typenumeric;}
    //
    inline qreal getTypenumeric() const {return typenumeric;}
    //
    inline void setTypenumericnull(const qreal& typenumericnull) {this->typenumericnull = typenumericnull;}
    //
    inline qreal getTypenumericnull() const {return typenumericnull;}
    //
    inline void setTypereal(const qreal& typereal) {this->typereal = typereal;}
    //
    inline qreal getTypereal() const {return typereal;}
    //
    inline void setTyperealnull(const qreal& typerealnull) {this->typerealnull = typerealnull;}
    //
    inline qreal getTyperealnull() const {return typerealnull;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqlServerDefaultTestInt> SqlServerDefaultTestIntList;
Q_DECLARE_METATYPE(SqlServerDefaultTestInt);