/*This file is auto generated by vscode-qtdao*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

class SqlServerTest1 {
    Q_GADGET

    Q_PROPERTY(qint64 id MEMBER id)
    Q_PROPERTY(QString name MEMBER name)
    Q_PROPERTY(qreal number MEMBER number)
    Q_PROPERTY(QByteArray hex MEMBER hex)
    Q_PROPERTY(QVariantMap extra MEMBER __extra)

private:
    //主键
    qint64 id;
    //复合主键
    QString name;
    //浮点数字
    qreal number;
    //二进制
    QByteArray hex;

    QVariantMap __extra;

public:

   SqlServerTest1() {
        id = -1;
        name = "text";
        number = 10.0;
   }

    SqlServerTest1(
        const qint64& id,
        const QString& name,
        const qreal& number,
        const QByteArray& hex
    ) : id(id)
    , name(name)
    , number(number)
    , hex(hex)
    {
    }

    SqlServerTest1(
        const QByteArray& hex
    ) : hex(hex)
    {
        id = -1;
        name = "text";
        number = 10.0;
    }

public:
    class Fields {
    public:
        dao::EntityField<qint64> id = dao::EntityField<qint64>("id", "ts_sqlservertest1");
        dao::EntityField<QString> name = dao::EntityField<QString>("name", "ts_sqlservertest1");
        dao::EntityField<qreal> number = dao::EntityField<qreal>("number", "ts_sqlservertest1");
        dao::EntityField<QByteArray> hex = dao::EntityField<QByteArray>("hex", "ts_sqlservertest1");

    protected:
        void reset(const QString& tbName) {
            id = dao::EntityField<qint64>("id", tbName);
            name = dao::EntityField<QString>("name", tbName);
            number = dao::EntityField<qreal>("number", tbName);
            hex = dao::EntityField<QByteArray>("hex", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 4;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlservertest1");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "id"
                << "name"
                << "number"
                << "hex";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "id"
                << "name"
                << "number"
                << "hex";
        }

        static QStringList getFieldsWithoutTimestamp() {
            return QStringList()
                << "id"
                << "name"
                << "number"
                << "hex";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("id bigint default -1")
                << QStringLiteral("name varchar(100) default 'text'")
                << QStringLiteral("number real null default null")
                << QStringLiteral("hex varbinary(1000)");
        }

        static QStringList getPrimaryKeys() {
            return QStringList() << "id" << "name";
        }

        static QList<QStringList> getClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QString getIndexOption(const QString& name) {
            Q_UNUSED(name);
            return QString();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqlServerTest1& entity) {
            return QVariantList()
                << entity.id
                << entity.name
                << entity.number
                << entity.hex;
        }

        static QVariant getValueByName(const SqlServerTest1& entity, const QString& target) {
            if (target == "id") {
                return entity.id;
            }
            if (target == "name") {
                return entity.name;
            }
            if (target == "number") {
                return entity.number;
            }
            if (target == "hex") {
                return entity.hex;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqlServerTest1& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqlServerTest1& entity, const QString& target, QVariant value) {
            if (target == "id") {
                entity.id = value.value<qint64>();
            } else if (target == "name") {
                entity.name = value.value<QString>();
            } else if (target == "number") {
                entity.number = value.value<qreal>();
            } else if (target == "hex") {
                entity.hex = value.value<QByteArray>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqlServerTest1 fromJson(const QJsonObject& object) {
            SqlServerTest1 entity;
            entity.id = object.value("id").toVariant().value<qint64>();
            entity.name = object.value("name").toVariant().value<QString>();
            entity.number = object.value("number").toVariant().value<qreal>();
            entity.hex = QByteArray::fromBase64(object.value("hex").toString().toLatin1());
            return entity;
        }

        static QJsonObject toJson(const SqlServerTest1& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("id", entity.id);
            object.insert("name", entity.name);
            object.insert("number", entity.number);
            object.insert("hex", QString::fromLatin1(entity.hex.toBase64()));

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //set 主键
    inline void setId(const qint64& id) {this->id = id;}
    //get 主键
    inline qint64 getId() const {return id;}
    //set 复合主键
    inline void setName(const QString& name) {this->name = name;}
    //get 复合主键
    inline QString getName() const {return name;}
    //set 浮点数字
    inline void setNumber(const qreal& number) {this->number = number;}
    //get 浮点数字
    inline qreal getNumber() const {return number;}
    //set 二进制
    inline void setHex(const QByteArray& hex) {this->hex = hex;}
    //get 二进制
    inline QByteArray getHex() const {return hex;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqlServerTest1> SqlServerTest1List;
Q_DECLARE_METATYPE(SqlServerTest1);