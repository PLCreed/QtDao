/*This file is auto generated by vscode-qtdao*/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"

class SqlServerDefaultTestStr {
    Q_GADGET

    Q_PROPERTY(QString typechar MEMBER typechar)
    Q_PROPERTY(QString typechar2 MEMBER typechar2)
    Q_PROPERTY(QString typechar3 MEMBER typechar3)
    Q_PROPERTY(QString typechar4 MEMBER typechar4)
    Q_PROPERTY(QString typechar5 MEMBER typechar5)
    Q_PROPERTY(QString typevarchar MEMBER typevarchar)
    Q_PROPERTY(QString typevarchar2 MEMBER typevarchar2)
    Q_PROPERTY(QString typevarchar3 MEMBER typevarchar3)
    Q_PROPERTY(QString typevarchar4 MEMBER typevarchar4)
    Q_PROPERTY(QString typevarchar5 MEMBER typevarchar5)
    Q_PROPERTY(QString typevarcharmax MEMBER typevarcharmax)
    Q_PROPERTY(QString typevarcharmax2 MEMBER typevarcharmax2)
    Q_PROPERTY(QString typevarcharmax3 MEMBER typevarcharmax3)
    Q_PROPERTY(QString typevarcharmax4 MEMBER typevarcharmax4)
    Q_PROPERTY(QString typevarcharmax5 MEMBER typevarcharmax5)
    Q_PROPERTY(QString typetext MEMBER typetext)
    Q_PROPERTY(QString typetext2 MEMBER typetext2)
    Q_PROPERTY(QString typetext3 MEMBER typetext3)
    Q_PROPERTY(QString typetext4 MEMBER typetext4)
    Q_PROPERTY(QString typetext5 MEMBER typetext5)
    Q_PROPERTY(QVariantMap extra MEMBER __extra)

private:
    //
    QString typechar;
    //
    QString typechar2;
    //
    QString typechar3;
    //
    QString typechar4;
    //
    QString typechar5;
    //
    QString typevarchar;
    //
    QString typevarchar2;
    //
    QString typevarchar3;
    //
    QString typevarchar4;
    //
    QString typevarchar5;
    //
    QString typevarcharmax;
    //
    QString typevarcharmax2;
    //
    QString typevarcharmax3;
    //
    QString typevarcharmax4;
    //
    QString typevarcharmax5;
    //
    QString typetext;
    //
    QString typetext2;
    //
    QString typetext3;
    //
    QString typetext4;
    //
    QString typetext5;

    QVariantMap __extra;

public:

   SqlServerDefaultTestStr() {
        typechar = "string";
        typechar2 = QString();
        typechar3 = QString();
        typechar4 = "null";
        typechar5 = QString("string");
        typevarchar = "string";
        typevarchar2 = QString();
        typevarchar3 = QString();
        typevarchar4 = "null";
        typevarchar5 = QString("string");
        typevarcharmax = "string";
        typevarcharmax2 = QString();
        typevarcharmax3 = QString();
        typevarcharmax4 = "null";
        typevarcharmax5 = QString("string");
        typetext = "string";
        typetext2 = QString();
        typetext3 = QString();
        typetext4 = "null";
        typetext5 = QString("string");
   }

    SqlServerDefaultTestStr(
        const QString& typechar,
        const QString& typechar2,
        const QString& typechar3,
        const QString& typechar4,
        const QString& typechar5,
        const QString& typevarchar,
        const QString& typevarchar2,
        const QString& typevarchar3,
        const QString& typevarchar4,
        const QString& typevarchar5,
        const QString& typevarcharmax,
        const QString& typevarcharmax2,
        const QString& typevarcharmax3,
        const QString& typevarcharmax4,
        const QString& typevarcharmax5,
        const QString& typetext,
        const QString& typetext2,
        const QString& typetext3,
        const QString& typetext4,
        const QString& typetext5
    ) : typechar(typechar)
    , typechar2(typechar2)
    , typechar3(typechar3)
    , typechar4(typechar4)
    , typechar5(typechar5)
    , typevarchar(typevarchar)
    , typevarchar2(typevarchar2)
    , typevarchar3(typevarchar3)
    , typevarchar4(typevarchar4)
    , typevarchar5(typevarchar5)
    , typevarcharmax(typevarcharmax)
    , typevarcharmax2(typevarcharmax2)
    , typevarcharmax3(typevarcharmax3)
    , typevarcharmax4(typevarcharmax4)
    , typevarcharmax5(typevarcharmax5)
    , typetext(typetext)
    , typetext2(typetext2)
    , typetext3(typetext3)
    , typetext4(typetext4)
    , typetext5(typetext5)
    {
    }

public:
    class Fields {
    public:
        dao::EntityField<QString> typechar = dao::EntityField<QString>("typechar", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typechar2 = dao::EntityField<QString>("typechar2", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typechar3 = dao::EntityField<QString>("typechar3", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typechar4 = dao::EntityField<QString>("typechar4", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typechar5 = dao::EntityField<QString>("typechar5", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarchar = dao::EntityField<QString>("typevarchar", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarchar2 = dao::EntityField<QString>("typevarchar2", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarchar3 = dao::EntityField<QString>("typevarchar3", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarchar4 = dao::EntityField<QString>("typevarchar4", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarchar5 = dao::EntityField<QString>("typevarchar5", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarcharmax = dao::EntityField<QString>("typevarcharmax", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarcharmax2 = dao::EntityField<QString>("typevarcharmax2", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarcharmax3 = dao::EntityField<QString>("typevarcharmax3", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarcharmax4 = dao::EntityField<QString>("typevarcharmax4", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typevarcharmax5 = dao::EntityField<QString>("typevarcharmax5", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typetext = dao::EntityField<QString>("typetext", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typetext2 = dao::EntityField<QString>("typetext2", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typetext3 = dao::EntityField<QString>("typetext3", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typetext4 = dao::EntityField<QString>("typetext4", "ts_sqlserverdefaultteststr");
        dao::EntityField<QString> typetext5 = dao::EntityField<QString>("typetext5", "ts_sqlserverdefaultteststr");

    protected:
        void reset(const QString& tbName) {
            typechar = dao::EntityField<QString>("typechar", tbName);
            typechar2 = dao::EntityField<QString>("typechar2", tbName);
            typechar3 = dao::EntityField<QString>("typechar3", tbName);
            typechar4 = dao::EntityField<QString>("typechar4", tbName);
            typechar5 = dao::EntityField<QString>("typechar5", tbName);
            typevarchar = dao::EntityField<QString>("typevarchar", tbName);
            typevarchar2 = dao::EntityField<QString>("typevarchar2", tbName);
            typevarchar3 = dao::EntityField<QString>("typevarchar3", tbName);
            typevarchar4 = dao::EntityField<QString>("typevarchar4", tbName);
            typevarchar5 = dao::EntityField<QString>("typevarchar5", tbName);
            typevarcharmax = dao::EntityField<QString>("typevarcharmax", tbName);
            typevarcharmax2 = dao::EntityField<QString>("typevarcharmax2", tbName);
            typevarcharmax3 = dao::EntityField<QString>("typevarcharmax3", tbName);
            typevarcharmax4 = dao::EntityField<QString>("typevarcharmax4", tbName);
            typevarcharmax5 = dao::EntityField<QString>("typevarcharmax5", tbName);
            typetext = dao::EntityField<QString>("typetext", tbName);
            typetext2 = dao::EntityField<QString>("typetext2", tbName);
            typetext3 = dao::EntityField<QString>("typetext3", tbName);
            typetext4 = dao::EntityField<QString>("typetext4", tbName);
            typetext5 = dao::EntityField<QString>("typetext5", tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize() {
            return 20;
        }

        static QString getTableName() {
            return QStringLiteral("ts_sqlserverdefaultteststr");
        }

        static QString getSourceName() {
            return getTableName();
        }

        static QStringList getFields() {
            return QStringList()
                << "typechar"
                << "typechar2"
                << "typechar3"
                << "typechar4"
                << "typechar5"
                << "typevarchar"
                << "typevarchar2"
                << "typevarchar3"
                << "typevarchar4"
                << "typevarchar5"
                << "typevarcharmax"
                << "typevarcharmax2"
                << "typevarcharmax3"
                << "typevarcharmax4"
                << "typevarcharmax5"
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5";
        }

        static QStringList getFieldsWithoutAutoIncrement() {
            return QStringList()
                << "typechar"
                << "typechar2"
                << "typechar3"
                << "typechar4"
                << "typechar5"
                << "typevarchar"
                << "typevarchar2"
                << "typevarchar3"
                << "typevarchar4"
                << "typevarchar5"
                << "typevarcharmax"
                << "typevarcharmax2"
                << "typevarcharmax3"
                << "typevarcharmax4"
                << "typevarcharmax5"
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5";
        }

        static QStringList getFieldsWithoutTimestamp() {
            return QStringList()
                << "typechar"
                << "typechar2"
                << "typechar3"
                << "typechar4"
                << "typechar5"
                << "typevarchar"
                << "typevarchar2"
                << "typevarchar3"
                << "typevarchar4"
                << "typevarchar5"
                << "typevarcharmax"
                << "typevarcharmax2"
                << "typevarcharmax3"
                << "typevarcharmax4"
                << "typevarcharmax5"
                << "typetext"
                << "typetext2"
                << "typetext3"
                << "typetext4"
                << "typetext5";
        }

        static QStringList getFieldsType() {
            return QStringList() 
                << QStringLiteral("typechar char null default 'string'")
                << QStringLiteral("typechar2 char null default null")
                << QStringLiteral("typechar3 char null default ''")
                << QStringLiteral("typechar4 char null default 'null'")
                << QStringLiteral("typechar5 char null default null")
                << QStringLiteral("typevarchar varchar null default 'string'")
                << QStringLiteral("typevarchar2 varchar null default null")
                << QStringLiteral("typevarchar3 varchar null default ''")
                << QStringLiteral("typevarchar4 varchar null default 'null'")
                << QStringLiteral("typevarchar5 varchar null default null")
                << QStringLiteral("typevarcharmax varchar(max) null default 'string'")
                << QStringLiteral("typevarcharmax2 varchar(max) null default null")
                << QStringLiteral("typevarcharmax3 varchar(max) null default ''")
                << QStringLiteral("typevarcharmax4 varchar(max) null default 'null'")
                << QStringLiteral("typevarcharmax5 varchar(max) null default null")
                << QStringLiteral("typetext text null default 'string'")
                << QStringLiteral("typetext2 text null default null")
                << QStringLiteral("typetext3 text null default ''")
                << QStringLiteral("typetext4 text null default 'null'")
                << QStringLiteral("typetext5 text null default null");
        }

        static QStringList getPrimaryKeys() {
            return QStringList();
        }

        static QList<QStringList> getClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QList<QStringList> getUniqueNonClusteredIndexFields() {
            return QList<QStringList>();
        }

        static QString getIndexOption(const QString& name) {
            Q_UNUSED(name);
            return QString();
        }

        static bool isAutoIncrement(const QString& name) {
            Q_UNUSED(name);
            return false;
        }
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const SqlServerDefaultTestStr& entity) {
            return QVariantList()
                << entity.typechar
                << entity.typechar2
                << entity.typechar3
                << entity.typechar4
                << entity.typechar5
                << entity.typevarchar
                << entity.typevarchar2
                << entity.typevarchar3
                << entity.typevarchar4
                << entity.typevarchar5
                << entity.typevarcharmax
                << entity.typevarcharmax2
                << entity.typevarcharmax3
                << entity.typevarcharmax4
                << entity.typevarcharmax5
                << entity.typetext
                << entity.typetext2
                << entity.typetext3
                << entity.typetext4
                << entity.typetext5;
        }

        static QVariant getValueByName(const SqlServerDefaultTestStr& entity, const QString& target) {
            if (target == "typechar") {
                return entity.typechar;
            }
            if (target == "typechar2") {
                return entity.typechar2;
            }
            if (target == "typechar3") {
                return entity.typechar3;
            }
            if (target == "typechar4") {
                return entity.typechar4;
            }
            if (target == "typechar5") {
                return entity.typechar5;
            }
            if (target == "typevarchar") {
                return entity.typevarchar;
            }
            if (target == "typevarchar2") {
                return entity.typevarchar2;
            }
            if (target == "typevarchar3") {
                return entity.typevarchar3;
            }
            if (target == "typevarchar4") {
                return entity.typevarchar4;
            }
            if (target == "typevarchar5") {
                return entity.typevarchar5;
            }
            if (target == "typevarcharmax") {
                return entity.typevarcharmax;
            }
            if (target == "typevarcharmax2") {
                return entity.typevarcharmax2;
            }
            if (target == "typevarcharmax3") {
                return entity.typevarcharmax3;
            }
            if (target == "typevarcharmax4") {
                return entity.typevarcharmax4;
            }
            if (target == "typevarcharmax5") {
                return entity.typevarcharmax5;
            }
            if (target == "typetext") {
                return entity.typetext;
            }
            if (target == "typetext2") {
                return entity.typetext2;
            }
            if (target == "typetext3") {
                return entity.typetext3;
            }
            if (target == "typetext4") {
                return entity.typetext4;
            }
            if (target == "typetext5") {
                return entity.typetext5;
            }
            return entity.__extra.value(target);
        }

        static void bindAutoIncrementId(SqlServerDefaultTestStr& entity, const QVariant& id) {
            Q_UNUSED(entity);
            Q_UNUSED(id);
        }

        static void bindValue(SqlServerDefaultTestStr& entity, const QString& target, QVariant value) {
            if (target == "typechar") {
                entity.typechar = value.value<QString>();
            } else if (target == "typechar2") {
                entity.typechar2 = value.value<QString>();
            } else if (target == "typechar3") {
                entity.typechar3 = value.value<QString>();
            } else if (target == "typechar4") {
                entity.typechar4 = value.value<QString>();
            } else if (target == "typechar5") {
                entity.typechar5 = value.value<QString>();
            } else if (target == "typevarchar") {
                entity.typevarchar = value.value<QString>();
            } else if (target == "typevarchar2") {
                entity.typevarchar2 = value.value<QString>();
            } else if (target == "typevarchar3") {
                entity.typevarchar3 = value.value<QString>();
            } else if (target == "typevarchar4") {
                entity.typevarchar4 = value.value<QString>();
            } else if (target == "typevarchar5") {
                entity.typevarchar5 = value.value<QString>();
            } else if (target == "typevarcharmax") {
                entity.typevarcharmax = value.value<QString>();
            } else if (target == "typevarcharmax2") {
                entity.typevarcharmax2 = value.value<QString>();
            } else if (target == "typevarcharmax3") {
                entity.typevarcharmax3 = value.value<QString>();
            } else if (target == "typevarcharmax4") {
                entity.typevarcharmax4 = value.value<QString>();
            } else if (target == "typevarcharmax5") {
                entity.typevarcharmax5 = value.value<QString>();
            } else if (target == "typetext") {
                entity.typetext = value.value<QString>();
            } else if (target == "typetext2") {
                entity.typetext2 = value.value<QString>();
            } else if (target == "typetext3") {
                entity.typetext3 = value.value<QString>();
            } else if (target == "typetext4") {
                entity.typetext4 = value.value<QString>();
            } else if (target == "typetext5") {
                entity.typetext5 = value.value<QString>();
            } else {
                entity.__putExtra(target, value);
            }
        }

        static SqlServerDefaultTestStr fromJson(const QJsonObject& object) {
            SqlServerDefaultTestStr entity;
            entity.typechar = object.value("typechar").toVariant().value<QString>();
            entity.typechar2 = object.value("typechar2").toVariant().value<QString>();
            entity.typechar3 = object.value("typechar3").toVariant().value<QString>();
            entity.typechar4 = object.value("typechar4").toVariant().value<QString>();
            entity.typechar5 = object.value("typechar5").toVariant().value<QString>();
            entity.typevarchar = object.value("typevarchar").toVariant().value<QString>();
            entity.typevarchar2 = object.value("typevarchar2").toVariant().value<QString>();
            entity.typevarchar3 = object.value("typevarchar3").toVariant().value<QString>();
            entity.typevarchar4 = object.value("typevarchar4").toVariant().value<QString>();
            entity.typevarchar5 = object.value("typevarchar5").toVariant().value<QString>();
            entity.typevarcharmax = object.value("typevarcharmax").toVariant().value<QString>();
            entity.typevarcharmax2 = object.value("typevarcharmax2").toVariant().value<QString>();
            entity.typevarcharmax3 = object.value("typevarcharmax3").toVariant().value<QString>();
            entity.typevarcharmax4 = object.value("typevarcharmax4").toVariant().value<QString>();
            entity.typevarcharmax5 = object.value("typevarcharmax5").toVariant().value<QString>();
            entity.typetext = object.value("typetext").toVariant().value<QString>();
            entity.typetext2 = object.value("typetext2").toVariant().value<QString>();
            entity.typetext3 = object.value("typetext3").toVariant().value<QString>();
            entity.typetext4 = object.value("typetext4").toVariant().value<QString>();
            entity.typetext5 = object.value("typetext5").toVariant().value<QString>();
            return entity;
        }

        static QJsonObject toJson(const SqlServerDefaultTestStr& entity, QStringList excludeKeys = QStringList()) {
            QJsonObject object;
            object.insert("typechar", entity.typechar);
            object.insert("typechar2", entity.typechar2);
            object.insert("typechar3", entity.typechar3);
            object.insert("typechar4", entity.typechar4);
            object.insert("typechar5", entity.typechar5);
            object.insert("typevarchar", entity.typevarchar);
            object.insert("typevarchar2", entity.typevarchar2);
            object.insert("typevarchar3", entity.typevarchar3);
            object.insert("typevarchar4", entity.typevarchar4);
            object.insert("typevarchar5", entity.typevarchar5);
            object.insert("typevarcharmax", entity.typevarcharmax);
            object.insert("typevarcharmax2", entity.typevarcharmax2);
            object.insert("typevarcharmax3", entity.typevarcharmax3);
            object.insert("typevarcharmax4", entity.typevarcharmax4);
            object.insert("typevarcharmax5", entity.typevarcharmax5);
            object.insert("typetext", entity.typetext);
            object.insert("typetext2", entity.typetext2);
            object.insert("typetext3", entity.typetext3);
            object.insert("typetext4", entity.typetext4);
            object.insert("typetext5", entity.typetext5);

            for (const auto& key : excludeKeys) {
                object.remove(key);
            }
            return object;
        }
    };

public:
    //
    inline void setTypechar(const QString& typechar) {this->typechar = typechar;}
    //
    inline QString getTypechar() const {return typechar;}
    //
    inline void setTypechar2(const QString& typechar2) {this->typechar2 = typechar2;}
    //
    inline QString getTypechar2() const {return typechar2;}
    //
    inline void setTypechar3(const QString& typechar3) {this->typechar3 = typechar3;}
    //
    inline QString getTypechar3() const {return typechar3;}
    //
    inline void setTypechar4(const QString& typechar4) {this->typechar4 = typechar4;}
    //
    inline QString getTypechar4() const {return typechar4;}
    //
    inline void setTypechar5(const QString& typechar5) {this->typechar5 = typechar5;}
    //
    inline QString getTypechar5() const {return typechar5;}
    //
    inline void setTypevarchar(const QString& typevarchar) {this->typevarchar = typevarchar;}
    //
    inline QString getTypevarchar() const {return typevarchar;}
    //
    inline void setTypevarchar2(const QString& typevarchar2) {this->typevarchar2 = typevarchar2;}
    //
    inline QString getTypevarchar2() const {return typevarchar2;}
    //
    inline void setTypevarchar3(const QString& typevarchar3) {this->typevarchar3 = typevarchar3;}
    //
    inline QString getTypevarchar3() const {return typevarchar3;}
    //
    inline void setTypevarchar4(const QString& typevarchar4) {this->typevarchar4 = typevarchar4;}
    //
    inline QString getTypevarchar4() const {return typevarchar4;}
    //
    inline void setTypevarchar5(const QString& typevarchar5) {this->typevarchar5 = typevarchar5;}
    //
    inline QString getTypevarchar5() const {return typevarchar5;}
    //
    inline void setTypevarcharmax(const QString& typevarcharmax) {this->typevarcharmax = typevarcharmax;}
    //
    inline QString getTypevarcharmax() const {return typevarcharmax;}
    //
    inline void setTypevarcharmax2(const QString& typevarcharmax2) {this->typevarcharmax2 = typevarcharmax2;}
    //
    inline QString getTypevarcharmax2() const {return typevarcharmax2;}
    //
    inline void setTypevarcharmax3(const QString& typevarcharmax3) {this->typevarcharmax3 = typevarcharmax3;}
    //
    inline QString getTypevarcharmax3() const {return typevarcharmax3;}
    //
    inline void setTypevarcharmax4(const QString& typevarcharmax4) {this->typevarcharmax4 = typevarcharmax4;}
    //
    inline QString getTypevarcharmax4() const {return typevarcharmax4;}
    //
    inline void setTypevarcharmax5(const QString& typevarcharmax5) {this->typevarcharmax5 = typevarcharmax5;}
    //
    inline QString getTypevarcharmax5() const {return typevarcharmax5;}
    //
    inline void setTypetext(const QString& typetext) {this->typetext = typetext;}
    //
    inline QString getTypetext() const {return typetext;}
    //
    inline void setTypetext2(const QString& typetext2) {this->typetext2 = typetext2;}
    //
    inline QString getTypetext2() const {return typetext2;}
    //
    inline void setTypetext3(const QString& typetext3) {this->typetext3 = typetext3;}
    //
    inline QString getTypetext3() const {return typetext3;}
    //
    inline void setTypetext4(const QString& typetext4) {this->typetext4 = typetext4;}
    //
    inline QString getTypetext4() const {return typetext4;}
    //
    inline void setTypetext5(const QString& typetext5) {this->typetext5 = typetext5;}
    //
    inline QString getTypetext5() const {return typetext5;}
    //set temp data
    inline void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    inline QVariant __getExtra(const QString& key) const {return __extra.value(key);}
};
typedef QList<SqlServerDefaultTestStr> SqlServerDefaultTestStrList;
Q_DECLARE_METATYPE(SqlServerDefaultTestStr);